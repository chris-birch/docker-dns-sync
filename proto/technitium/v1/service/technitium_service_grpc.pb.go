// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: technitium_service.proto

package service

import (
	context "context"
	message "github.com/chris-birch/docker-dns-sync/proto/technitium/message"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TechnitiumService_ProcessRecord_FullMethodName = "/technitium.v1.TechnitiumService/ProcessRecord"
)

// TechnitiumServiceClient is the client API for TechnitiumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TechnitiumServiceClient interface {
	ProcessRecord(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[message.DnsRecord, emptypb.Empty], error)
}

type technitiumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTechnitiumServiceClient(cc grpc.ClientConnInterface) TechnitiumServiceClient {
	return &technitiumServiceClient{cc}
}

func (c *technitiumServiceClient) ProcessRecord(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[message.DnsRecord, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TechnitiumService_ServiceDesc.Streams[0], TechnitiumService_ProcessRecord_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[message.DnsRecord, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TechnitiumService_ProcessRecordClient = grpc.ClientStreamingClient[message.DnsRecord, emptypb.Empty]

// TechnitiumServiceServer is the server API for TechnitiumService service.
// All implementations must embed UnimplementedTechnitiumServiceServer
// for forward compatibility.
type TechnitiumServiceServer interface {
	ProcessRecord(grpc.ClientStreamingServer[message.DnsRecord, emptypb.Empty]) error
	mustEmbedUnimplementedTechnitiumServiceServer()
}

// UnimplementedTechnitiumServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTechnitiumServiceServer struct{}

func (UnimplementedTechnitiumServiceServer) ProcessRecord(grpc.ClientStreamingServer[message.DnsRecord, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method ProcessRecord not implemented")
}
func (UnimplementedTechnitiumServiceServer) mustEmbedUnimplementedTechnitiumServiceServer() {}
func (UnimplementedTechnitiumServiceServer) testEmbeddedByValue()                           {}

// UnsafeTechnitiumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TechnitiumServiceServer will
// result in compilation errors.
type UnsafeTechnitiumServiceServer interface {
	mustEmbedUnimplementedTechnitiumServiceServer()
}

func RegisterTechnitiumServiceServer(s grpc.ServiceRegistrar, srv TechnitiumServiceServer) {
	// If the following call pancis, it indicates UnimplementedTechnitiumServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TechnitiumService_ServiceDesc, srv)
}

func _TechnitiumService_ProcessRecord_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TechnitiumServiceServer).ProcessRecord(&grpc.GenericServerStream[message.DnsRecord, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TechnitiumService_ProcessRecordServer = grpc.ClientStreamingServer[message.DnsRecord, emptypb.Empty]

// TechnitiumService_ServiceDesc is the grpc.ServiceDesc for TechnitiumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TechnitiumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "technitium.v1.TechnitiumService",
	HandlerType: (*TechnitiumServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessRecord",
			Handler:       _TechnitiumService_ProcessRecord_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "technitium_service.proto",
}
